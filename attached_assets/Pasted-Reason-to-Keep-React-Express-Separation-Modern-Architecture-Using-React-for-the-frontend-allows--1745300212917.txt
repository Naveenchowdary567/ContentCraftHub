Reason to Keep React + Express Separation:
Modern Architecture: Using React for the frontend allows you to build a Single Page Application (SPA), which offers a more interactive user experience. React is designed for dynamic, client-side rendering, allowing you to create complex and responsive UIs with ease.

Better Performance: SPAs (like React) are generally faster once loaded, as the entire app doesn't need to reload every time the user navigates between pages. You can also use React Router to handle routing on the frontend, offering smooth transitions without full page reloads.

Separation of Concerns: With React and Express separated, the backend serves the API and handles data operations, while the frontend (React) handles the UI and user interaction. This separation makes the application easier to maintain, especially as it scales.

Future Scalability: React is better suited for handling larger, more complex applications. If you plan on adding new features or want to keep your frontend flexible, React will make future development more efficient.

Industry Standard: Many modern web applications use this structure (React for frontend, Express for backend) because it allows for easy integration, faster development, and better user experience.

Alternative: Keeping React Frontend with a More Traditional Express Backend
Instead of fully transitioning to a server-rendered approach (EJS/Pug), you could still reorganize the backend in a more structured way without abandoning React:

Backend with Express:

Continue using Express for the backend and organize routes, models, and controllers into separate directories for better structure.

Use EJS/Pug (optional) on the backend only if you need some server-side rendered pages or email templates but keep the majority of the views in React.

React Frontend:

Continue using React for dynamic user interfaces.

React will still make API calls to the backend (Express) via Axios or Fetch, keeping the architecture separated but structured.